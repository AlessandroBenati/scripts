#!/usr/bin/python

# This library has a read_skymodel function which handle different skymodels "shape"
# TODO: It doesn't handle the default values yet

import os, re, csv
import lib_coordinates_mode as cm
import numpy as np

def read_skymodel(skymodel, fields=[]):
    """
    Read a skymodel file (BBS format)
    skymodel = the skymodel file generated by PyBDSM
    fields = list of fields to load
    Return:
    skymodel_data = numpy array with all the sources in the skymodel
    """
    names = []
    formats = []
    usecols = []
    converters = {}
    filling_values = {}
    
    # remove patches
    # remove commas inside [] of the spectral index
    os.system("grep -v '^,' " + skymodel + " | sed 's/\(\[.*\),\(.*\]\)/\1\2/' > " + skymodel + ".tmp")
    skymodel = skymodel + ".tmp"

    f = open(skymodel, 'r')
    header = f.readline()
    # remove useless part of the header
    header = re.sub(r'\s', '', header)
    header = re.sub(r'\)=format', '', header)
    header = re.sub(r'#\(', '', header)
    headers = header.split(',')
    for i, h in enumerate(headers):

        # if there's a default value, set it and remove it from the header name
        if re.match(r'=', h):
            default_values = re.sub(r'.*=', '', h).replace('\'','')
            filling_values[i]=default_value 
            h = re.sub(r'=.*', '', h)

        if not h in fields: continue

        names.append(h)
        usecols.append(i)

        if h == "Ra":
            formats.append(np.float)
            converters[i] = lambda x: cm.hmstora(x.split(':')[0],x.split(':')[1],x.split(':')[2]) if x else 0.0

        elif h == "Dec":
            formats.append(np.float)
            converters[i] = lambda x: cm.dmstodec(x.split('.')[0],x.split('.')[1],x.split('.')[2]) if x else 0.0

        elif h == "I" or h == "Q" or h == "U" or h == "V" or h == "ReferenceFrequency" or h == "MajorAxis" or h == "MinorAxis" or h == "Orientation":
            formats.append(np.float)

        # note that SpectralIndex also end up as a string with no comma!!
        else:
            formats.append('S100')
    types = np.dtype({'names':names,'formats':formats})

    # automatically add the missing commas at the end of the lines
    n = len(headers)
    def fileiter(skymodel, n):
        for line in csv.reader(open(skymodel,'r')):
            if line[0] == '#': continue
            n_commas = line.count(',')
            missing_commas = n - n_commas
            print missing_commas
            yield line+','*missing_commas

    skymodel_data = np.genfromtxt(fileiter(skymodel, n), comments='#', unpack=True, dtype=types, delimiter=',', autostrip=True, usecols=usecols, converters=converters, filling_values=filling_values)
    os.system('rm -r '+skymodel)

    return skymodel_data
